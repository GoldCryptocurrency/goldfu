user@198-23-151-66-host:~/Desktop/txbits$ ./txbits.sh run
~/Desktop/txbits/txbits ~/Desktop/txbits
[info] Loading project definition from /home/user/Desktop/txbits/txbits/project
[info] Set current project to txbits (in build file:/home/user/Desktop/txbits/txbits/)

--- (Running the application, auto-reloading is enabled) ---

[info] p.a.l.c.ActorSystemProvider - Starting application default Akka system: application
[info] p.c.s.NettyServer - Listening for HTTP on /0:0:0:0:0:0:0:0:9000

(Server started, use Ctrl+D to stop and go back to the console...)

[debug] c.j.b.BoneCPDataSource - JDBC URL = jdbc:postgresql://localhost/txbits_testnet, Username = user, partitions = 1, max (per partition) = 30, min (per partition) = 5, idle max age = 10 min, idle test period = 1 min, strategy = DEFAULT
[info] p.a.d.DefaultDBApi - Database [trust] connected at jdbc:postgresql://localhost/txbits_testnet
[debug] c.j.b.BoneCPDataSource - JDBC URL = jdbc:postgresql://localhost/txbits_testnet, Username = user, partitions = 1, max (per partition) = 30, min (per partition) = 5, idle max age = 10 min, idle test period = 1 min, strategy = DEFAULT
[info] p.a.d.DefaultDBApi - Database [wallet] connected at jdbc:postgresql://localhost/txbits_testnet
[debug] c.j.b.BoneCPDataSource - JDBC URL = jdbc:postgresql://localhost/txbits_testnet, Username = user, partitions = 1, max (per partition) = 30, min (per partition) = 5, idle max age = 10 min, idle test period = 1 min, strategy = DEFAULT
[info] p.a.d.DefaultDBApi - Database [default] connected at jdbc:postgresql://localhost/txbits_testnet
[debug] c.j.b.StatementHandle - select id, hash, apply_script, revert_script, state, last_problem from play_evolutions where state like 'applying_%'
[debug] c.j.b.StatementHandle - 
            select id, hash, apply_script, revert_script from play_evolutions order by id
        
[info] a.e.s.Slf4jLogger - Slf4jLogger started
[info] p.a.l.c.ActorSystemProvider - Starting application default Akka system: application
[info] application - Application has started
[info] application - [securesocial] loaded user service: class service.txbitsUserService$
[info] play.api.Play - Application started (Dev)
[debug] application - [securesocial] calling deleteExpiredTokens()
[debug] c.j.b.PreparedStatementHandle - 
      begin;
      delete from deposits_crypto;
      delete from deposits_other;
      delete from deposits;
      delete from users_passwords;
      delete from users_api_keys;
      delete from users_tfa_secrets;
      delete from users_backup_otps;
      delete from users_addresses;
      delete from dw_fees;
      delete from trade_fees;
      delete from totp_tokens_blacklist;
      delete from withdrawals_other;
      delete from withdrawals_crypto;
      delete from withdrawals_crypto_tx_mutated;
      delete from withdrawals_crypto_tx_cold_storage;
      delete from withdrawals_crypto_tx;
      delete from withdrawals;
      delete from currencies_crypto;
      delete from wallets_crypto;
      delete from balances;
      delete from matches;
      delete from stats_30_min;
      delete from orders;
      delete from markets;
      delete from withdrawal_limits;
      delete from currencies;
      delete from event_log;
      delete from tokens;
      delete from trusted_action_requests;
      delete from users;

      select currency_insert('BTC',10);
      select currency_insert('GOLDC',20);
      select currency_insert('USD',30);
      select currency_insert('CAD',40);

      insert into markets(base,counter, limit_min, position) values ('BTC','USD',0.01,10);
      insert into markets(base,counter, limit_min, position) values ('GOLDC','USD',0.1,20);
      insert into markets(base,counter, limit_min, position) values ('GOLDC','BTC',0.1,30);
      insert into markets(base,counter, limit_min, position) values ('USD','CAD',1.00,40);

      insert into dw_fees(currency, method, deposit_constant, deposit_linear, withdraw_constant, withdraw_linear) values ('BTC', 'blockchain', 0.000, 0.000, 0.001, 0.000);
      insert into dw_fees(currency, method, deposit_constant, deposit_linear, withdraw_constant, withdraw_linear) values ('GOLDC', 'blockchain', 0.000, 0.000, 0.010, 0.000);
      insert into dw_fees(currency, method, deposit_constant, deposit_linear, withdraw_constant, withdraw_linear) values ('USD', 'wire', 0.000, 0.000, 0.000, 0.000);
      insert into dw_fees(currency, method, deposit_constant, deposit_linear, withdraw_constant, withdraw_linear) values ('CAD', 'wire', 0.000, 0.000, 0.000, 0.000);

      insert into trade_fees(linear, one_way) values (0.005, true);

      insert into withdrawal_limits(currency, limit_min, limit_max) values ('BTC', 0.010, 10);
      insert into withdrawal_limits(currency, limit_min, limit_max) values ('GOLDC', 0.100, 100);
      insert into withdrawal_limits(currency, limit_min, limit_max) values ('USD', 1, 10000);
      insert into withdrawal_limits(currency, limit_min, limit_max) values ('CAD', 1, 10000);

      insert into currencies_crypto(currency) values('BTC');
      insert into currencies_crypto(currency) values('GOLDC');

      insert into wallets_crypto(currency, last_block_read, balance_min, balance_warn, balance_target, balance_max) values('GOLDC', 42, 0, 0, 1000, 10000);
      insert into wallets_crypto(currency, last_block_read, balance_min, balance_warn, balance_target, balance_max) values('BTC', 42, 0, 0, 100, 1000);

      insert into users(id, email) values (0, '');
      insert into balances (user_id, currency) select 0, currency from currencies;

      select create_user('me@viktorstanchev.com', 'password', true, null, 'en', 'stanchev');
      select create_user('a@a.com', 'qwerty123', false, null, 'en', 'SuperCoolAdminGuy');
      select create_user('b@b.com', '123qwe', false, null, 'en', 'StuzerTheLuzer');

      update balances set balance = 1000 where user_id in (select id from users where email in ('me@viktorstanchev.com', 'a@a.com')) and currency in ('USD', 'CAD');
      commit;
      
[error] application - org.postgresql.util.PSQLException: Cannot change transaction read-only property in the middle of a transaction.
[debug] c.j.b.PreparedStatementHandle -  select * from get_currencies() 
[debug] c.j.b.PreparedStatementHandle -  select * from get_pairs() 
[debug] c.j.b.PreparedStatementHandle -  select * from dw_fees() 
[debug] c.j.b.PreparedStatementHandle -  select * from trade_fees() 
[debug] c.j.b.PreparedStatementHandle -  select * from dw_limits() 
[debug] c.j.b.PreparedStatementHandle - select * from get_required_confirmations()
[debug] c.j.b.PreparedStatementHandle - select * from delete_expired_tokens()
[debug] c.j.b.PreparedStatementHandle - 
    select * from delete_expired_totp_blacklist_tokens()
    
[debug] c.j.b.PreparedStatementHandle -  select * from get_min_confirmations('GOLDC') 
[debug] c.j.b.PreparedStatementHandle -  select * from get_min_confirmations('BTC') 
[debug] c.j.b.PreparedStatementHandle -  select * from get_node_info('BTC', 0) 
[debug] c.j.b.PreparedStatementHandle -  select * from get_last_block_read('BTC', 0) 
[error] a.a.OneForOneStrategy - exception during creation
akka.actor.ActorInitializationException: exception during creation
	at akka.actor.ActorInitializationException$.apply(Actor.scala:166) ~[akka-actor_2.11-2.3.11.jar:na]
	at akka.actor.ActorCell.create(ActorCell.scala:596) ~[akka-actor_2.11-2.3.11.jar:na]
	at akka.actor.ActorCell.invokeAll$1(ActorCell.scala:456) ~[akka-actor_2.11-2.3.11.jar:na]
	at akka.actor.ActorCell.systemInvoke(ActorCell.scala:478) ~[akka-actor_2.11-2.3.11.jar:na]
	at akka.dispatch.Mailbox.processAllSystemMessages(Mailbox.scala:263) ~[akka-actor_2.11-2.3.11.jar:na]
	at akka.dispatch.Mailbox.run(Mailbox.scala:219) ~[akka-actor_2.11-2.3.11.jar:na]
	at akka.dispatch.ForkJoinExecutorConfigurator$AkkaForkJoinTask.exec(AbstractDispatcher.scala:397) [akka-actor_2.11-2.3.11.jar:na]
	at scala.concurrent.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260) [scala-library-2.11.7.jar:na]
	at scala.concurrent.forkjoin.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1339) [scala-library-2.11.7.jar:na]
	at scala.concurrent.forkjoin.ForkJoinPool.runWorker(ForkJoinPool.java:1979) [scala-library-2.11.7.jar:na]
Caused by: java.lang.reflect.InvocationTargetException: null
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method) ~[na:1.8.0_144]
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62) ~[na:1.8.0_144]
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45) ~[na:1.8.0_144]
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423) ~[na:1.8.0_144]
	at akka.util.Reflect$.instantiate(Reflect.scala:66) ~[akka-actor_2.11-2.3.11.jar:na]
	at akka.actor.ArgsReflectConstructor.produce(Props.scala:352) ~[akka-actor_2.11-2.3.11.jar:na]
	at akka.actor.Props.newActor(Props.scala:252) ~[akka-actor_2.11-2.3.11.jar:na]
	at akka.actor.ActorCell.newActor(ActorCell.scala:552) ~[akka-actor_2.11-2.3.11.jar:na]
	at akka.actor.ActorCell.create(ActorCell.scala:578) ~[akka-actor_2.11-2.3.11.jar:na]
	at akka.actor.ActorCell.invokeAll$1(ActorCell.scala:456) ~[akka-actor_2.11-2.3.11.jar:na]
Caused by: java.lang.RuntimeException: Left(UnexpectedNullableFound(ColumnName(.active,Some(active))))
	at anorm.MayErr$$anonfun$get$1.apply(MayErr.scala:35) ~[anorm_2.11-2.4.0.jar:2.4.0]
	at anorm.MayErr$$anonfun$get$1.apply(MayErr.scala:34) ~[anorm_2.11-2.4.0.jar:2.4.0]
	at scala.util.Either.fold(Either.scala:98) ~[scala-library-2.11.7.jar:na]
	at anorm.MayErr.get(MayErr.scala:34) ~[anorm_2.11-2.4.0.jar:2.4.0]
	at anorm.Row$class.unsafeGet(Row.scala:103) ~[anorm_2.11-2.4.0.jar:2.4.0]
	at anorm.Cursor$ResultRow.unsafeGet(Cursor.scala:77) ~[anorm_2.11-2.4.0.jar:2.4.0]
	at anorm.Row$class.apply(Row.scala:80) ~[anorm_2.11-2.4.0.jar:2.4.0]
	at anorm.Cursor$ResultRow.apply(Cursor.scala:77) ~[anorm_2.11-2.4.0.jar:2.4.0]
	at wallet.WalletModel$$anonfun$getMinConfirmations$1$$anonfun$apply$6.apply(WalletModel.scala:53) ~[classes/:na]
	at wallet.WalletModel$$anonfun$getMinConfirmations$1$$anonfun$apply$6.apply(WalletModel.scala:52) ~[classes/:na]
[debug] c.j.b.PreparedStatementHandle -  select get_balance('BTC', 0) 
[debug] c.j.b.PreparedStatementHandle -  select * from get_pending_deposits('BTC', 0) 
[debug] c.j.b.PreparedStatementHandle -  select * from get_unconfirmed_withdrawal_tx('BTC', 0) 
[debug] c.j.b.PreparedStatementHandle -  select pg_try_advisory_lock(0, 0) 
[debug] c.j.b.PreparedStatementHandle -  select free_address_count('BTC', 0) 
[debug] c.j.b.PreparedStatementHandle -  select * from chart_from_db('BTC', 'USD')
[debug] c.j.b.PreparedStatementHandle -  select * from chart_from_db('LTC', 'USD')
[debug] c.j.b.PreparedStatementHandle -  select * from chart_from_db('LTC', 'BTC')
[debug] c.j.b.PreparedStatementHandle -  select * from chart_from_db('USD', 'CAD')
[debug] c.j.b.PreparedStatementHandle - select email, is_signup, language from trusted_action_requests
[debug] c.j.b.PreparedStatementHandle - select w.*, u.email, u.id as uid, u.pgp, wc.address as destination from withdrawals w
       inner join users u on w.user_id = u.id
       left join withdrawals_crypto wc on w.id = wc.id
       where confirmation_token is null
      
[debug] application - [wallet] [BTC, 0] running update
[info] DefaultAuthenticator - SERVER at "jsonrpc" is requesting basic password authentication for "localhost:18332"
[info] application - [wallet] [BTC, 0] Begin processing transactions up to block 1180468
[debug] c.j.b.PreparedStatementHandle -  select get_balance('BTC', 0) 
[debug] c.j.b.PreparedStatementHandle -  select get_balance('BTC', 0) 
[debug] application - [securesocial] sending email to wallet@txbits.com
[debug] c.j.b.PreparedStatementHandle - 
      select set_last_block_read('BTC', 0,
      1180465, 0)
    
[info] application - [wallet] [BTC, 0] Finished processing transactions up to block 1180468
[debug] c.j.b.PreparedStatementHandle - select email, is_signup, language from trusted_action_requests
[debug] c.j.b.PreparedStatementHandle - select w.*, u.email, u.id as uid, u.pgp, wc.address as destination from withdrawals w
       inner join users u on w.user_id = u.id
       left join withdrawals_crypto wc on w.id = wc.id
       where confirmation_token is null
      
[debug] c.j.b.PreparedStatementHandle - select email, is_signup, language from trusted_action_requests
[debug] c.j.b.PreparedStatementHandle - select w.*, u.email, u.id as uid, u.pgp, wc.address as destination from withdrawals w
       inner join users u on w.user_id = u.id
       left join withdrawals_crypto wc on w.id = wc.id
       where confirmation_token is null
      


